name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  unit-test:
    name: "Unit test: ${{ matrix.os.name }} (${{ matrix.toolchain }})"
    continue-on-error: false
    runs-on: ${{ matrix.os.distro }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: Linux, distro: ubuntu-latest }
          - { name: Windows, distro: windows-latest }
          - { name: macOS, distro: macOS-latest }
        toolchain: [nightly, stable]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --all-features

  integration-test-sync:
    name: "Sync Integration test ${{ matrix.os.name }} (${{ matrix.toolchain }})"
    continue-on-error: false
    runs-on: ${{ matrix.os.distro }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: Linux, distro: ubuntu-latest }
          - { name: Windows, distro: windows-latest }
          - { name: macOS, distro: macOS-latest }
        toolchain: [nightly, stable]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --test "*"

  integration-test-async:
    name: "Async Integration test  ${{ matrix.os.name }} (${{ matrix.toolchain }})"
    continue-on-error: false
    runs-on: ${{ matrix.os.distro }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - { name: Linux, distro: ubuntu-latest }
          - { name: Windows, distro: windows-latest }
          - { name: macOS, distro: macOS-latest }
        toolchain: [nightly, stable]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --test "*" --features async

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -D warnings

  audit:
    name: Audit
    runs-on: ubuntu-latest

    on:
      push:
        paths: ["**/Cargo.toml"]
      pull_request:
        paths: ["**/Cargo.toml"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # coverage:
  #   name: Code coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Install toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true

  #     - name: Run cargo-tarpaulin
  #       uses: actions-rs/tarpaulin@v0.1
  #       with:
  #         args: --ignore-tests --all-features
